// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// protoc-gen-go-micro version: v3.10.4
// source: meter/meter.proto

package meter_handler

import (
	context "context"
	v31 "go.unistack.org/micro-client-http/v3"
	codec "go.unistack.org/micro-proto/v3/codec"
	v3 "go.unistack.org/micro-server-http/v3"
	client "go.unistack.org/micro/v3/client"
	server "go.unistack.org/micro/v3/server"
	http "net/http"
)

var (
	MeterServiceServerEndpoints = []v3.EndpointMetadata{
		{
			Name:   "MeterService.Metrics",
			Path:   "/metrics",
			Method: "GET",
			Body:   "",
			Stream: false,
		},
	}
)

type meterServiceClient struct {
	c    client.Client
	name string
}

func NewMeterServiceClient(name string, c client.Client) MeterServiceClient {
	return &meterServiceClient{c: c, name: name}
}

func (c *meterServiceClient) Metrics(ctx context.Context, req *codec.Frame, opts ...client.CallOption) (*codec.Frame, error) {
	errmap := make(map[string]interface{}, 1)
	errmap["default"] = &codec.Frame{}
	opts = append(opts,
		v31.ErrorMap(errmap),
	)
	opts = append(opts,
		v31.Method(http.MethodGet),
		v31.Path("/metrics"),
	)
	rsp := &codec.Frame{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "MeterService.Metrics", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type meterServiceServer struct {
	MeterServiceServer
}

func (h *meterServiceServer) Metrics(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error {
	return h.MeterServiceServer.Metrics(ctx, req, rsp)
}

func RegisterMeterServiceServer(s server.Server, sh MeterServiceServer, opts ...server.HandlerOption) error {
	type meterService interface {
		Metrics(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error
	}
	type MeterService struct {
		meterService
	}
	h := &meterServiceServer{sh}
	var nopts []server.HandlerOption
	nopts = append(nopts, v3.HandlerEndpoints(MeterServiceServerEndpoints))
	return s.Handle(s.NewHandler(&MeterService{h}, append(nopts, opts...)...))
}
