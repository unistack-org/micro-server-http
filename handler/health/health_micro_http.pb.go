// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// protoc-gen-go-micro version: v4.0.2
// source: health/health.proto

package health

import (
	context "context"
	codec "go.unistack.org/micro-proto/v4/codec"
	v4 "go.unistack.org/micro-server-http/v4"
	options "go.unistack.org/micro/v4/options"
	server "go.unistack.org/micro/v4/server"
)

var (
	HealthServiceServerEndpoints = []v4.EndpointMetadata{
		{
			Name:   "HealthService.Live",
			Path:   "/live",
			Method: "GET",
			Body:   "",
			Stream: false,
		},
		{
			Name:   "HealthService.Ready",
			Path:   "/ready",
			Method: "GET",
			Body:   "",
			Stream: false,
		},
		{
			Name:   "HealthService.Version",
			Path:   "/version",
			Method: "GET",
			Body:   "",
			Stream: false,
		},
	}
)

type healthServiceServer struct {
	HealthServiceServer
}

func (h *healthServiceServer) Live(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error {
	return h.HealthServiceServer.Live(ctx, req, rsp)
}

func (h *healthServiceServer) Ready(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error {
	return h.HealthServiceServer.Ready(ctx, req, rsp)
}

func (h *healthServiceServer) Version(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error {
	return h.HealthServiceServer.Version(ctx, req, rsp)
}

func RegisterHealthServiceServer(s server.Server, sh HealthServiceServer, opts ...options.Option) error {
	type healthService interface {
		Live(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error
		Ready(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error
		Version(ctx context.Context, req *codec.Frame, rsp *codec.Frame) error
	}
	type HealthService struct {
		healthService
	}
	h := &healthServiceServer{sh}
	var nopts []options.Option
	nopts = append(nopts, v4.HandlerEndpoints(HealthServiceServerEndpoints))
	return s.Handle(&HealthService{h}, append(nopts, opts...)...)
}
